name: All

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: '-D warnings'

jobs:
  test-stable:
    name: Test on ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # 32-bit target
          - target: i686-unknown-linux-gnu
            runner: ubuntu-latest
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit target
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup target add ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }} --no-default-features
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --all-features

  test-nightly:
    name: Test Nightly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo test

  msrv:
    name: Current MSRV is 1.60.0
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      # Now run `cargo +nightly -Z minimal-verisons check` in order to get a
      # Cargo.lock with the oldest possible deps
    - uses: dtolnay/rust-toolchain@nightly
    - run: cargo -Z minimal-versions check --no-default-features
      # Now check that `cargo build` works with respect to the oldest possible
      # deps and the stated MSRV
    - uses: dtolnay/rust-toolchain@1.60.0
    - run: cargo build --locked

#  bench:
#   name: Check that benchmarks compile
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#    - uses: dtolnay/rust-toolchain@stable
#    - name: Build u32 bench
#      env:
#        RUSTFLAGS: '--cfg curve25519_dalek_bits="32"'
#      run: cargo build --benches
#    - name: Build u64 bench
#      env:
#        RUSTFLAGS: '--cfg curve25519_dalek_bits="64"'
#      run: cargo build --benches
#    - name: Build default (host native) bench
#      run: cargo build --benches

  # Build no_std
  build-nostd:
    name: Build on no_std target (thumbv7em-none-eabi)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - crate: mem-protect
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: thumbv7em-none-eabi
      - uses: taiki-e/install-action@cargo-hack
      # No default features build
      - name: no_std / no feat ${{ matrix.crate }}
        run: cargo build -p ${{ matrix.crate }} --target thumbv7em-none-eabi --release --no-default-features
      - name: no_std / cargo hack ${{ matrix.crate }}
        run: cargo hack build -p ${{ matrix.crate }} --target thumbv7em-none-eabi --release --each-feature --exclude-features default,std,getrandom

  clippy:
    name: Check that clippy is happy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - run: cargo clippy --target x86_64-unknown-linux-gnu --all-features

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  doc:
    name: Check docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - run: cargo doc --all-features
